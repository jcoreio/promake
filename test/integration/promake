#!/usr/bin/env node
// @flow

const Promake = require('../..')
const glob = require('glob').sync
const fs = require('fs-extra')

const serverSourceFiles = glob('src/server/**/*.js')
const serverBuildFiles = serverSourceFiles.map((file) =>
  file.replace(/^src/, 'build')
)
const serverPrerequisites = [...serverSourceFiles]

const universalSourceFiles = glob('src/universal/**/*.js')
const universalBuildFiles = universalSourceFiles.map((file) =>
  file.replace(/^src/, 'build')
)
const universalPrerequisites = [...universalSourceFiles]

const clientPrerequisites = [
  ...universalSourceFiles,
  ...glob('src/client/**/*.js'),
  ...glob('src/client/**/*.css'),
]
const clientBuildFiles = ['build/assets/client.bundle.js']

const { rule, hashRule, task, cli, exec, spawn } = new Promake()

const serverRecipe = () => exec('babel src/server/ --out-dir build/server')
rule(serverBuildFiles, serverPrerequisites, serverRecipe)
const universalRecipe = () =>
  exec('babel src/universal/ --out-dir build/universal')
rule(universalBuildFiles, universalPrerequisites, universalRecipe)
const clientRecipe = async () => {
  await fs.mkdirs('build')
  await spawn('webpack', ['--progress', '--colors'])
}
rule(clientBuildFiles, clientPrerequisites, clientRecipe)

hashRule('md5', 'build/server.hash', serverPrerequisites, serverRecipe)
hashRule('md5', 'build/universal.hash', universalPrerequisites, universalRecipe)
hashRule('md5', 'build/client.hash', clientPrerequisites, clientRecipe)

task('build', [
  task('build:server', [...serverBuildFiles, ...universalBuildFiles]),
  task('build:client', clientBuildFiles),
]).description('build server and client')

task('build:ci', [
  task('build:server:ci', ['build/server.hash', 'build/universal.hash']),
  task('build:client:ci', ['build/client.hash']),
]).description('build server and client in CI')

task('clean', () => fs.remove('build')).description('remove all build output')

cli()
